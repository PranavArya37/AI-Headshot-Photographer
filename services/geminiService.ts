
import { GoogleGenAI, Modality } from "@google/genai";
import { fileToBase64 } from "../utils/fileUtils";

if (!process.env.API_KEY) {
  throw new Error("API_KEY environment variable is not set");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

export async function generateHeadshot(file: File, stylePrompt: string): Promise<string> {
  try {
    const base64Image = await fileToBase64(file);

    const imagePart = {
      inlineData: {
        data: base64Image,
        mimeType: file.type,
      },
    };

    const textPart = {
      text: `Based on the person in this image, generate a new, generic, professional headshot in the following style: "${stylePrompt}". The generated person should be inspired by the original but not an exact copy, suitable for a professional profile. The result should be a high-quality, realistic photograph.`,
    };

    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image',
      contents: {
        parts: [imagePart, textPart],
      },
      config: {
        responseModalities: [Modality.IMAGE],
      },
    });

    const firstPart = response.candidates?.[0]?.content?.parts?.[0];
    if (firstPart && firstPart.inlineData) {
      const base64Result = firstPart.inlineData.data;
      return `data:${firstPart.inlineData.mimeType};base64,${base64Result}`;
    }

    throw new Error('No image was generated by the API.');

  } catch (error) {
    console.error("Error calling Gemini API:", error);
    if (error instanceof Error) {
        throw new Error(`Failed to generate headshot: ${error.message}`);
    }
    throw new Error('An unknown error occurred while generating the headshot.');
  }
}
